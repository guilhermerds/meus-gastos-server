// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  incomes     Income[]
  expenses    Expense[]
  creditCards CreditCard[]
  categories  Category[]
}

model Category {
  id                  String               @id @default(uuid())
  name                String
  isExpense           Boolean
  icon                String
  userId              String
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses            Expense[]
  incomes             Income[]
  creditCardPurchases CreditCardPurchase[]
}

model Income {
  id          String   @id @default(uuid())
  name        String
  description String?
  value       Float
  date        DateTime
  received    Boolean
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Expense {
  id          String   @id @default(uuid())
  name        String
  description String?
  value       Float
  date        DateTime
  paid        Boolean
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model CreditCard {
  id         String    @id @default(uuid())
  name       String
  limit      Float
  closingDay Int
  dueDay     Int
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices   Invoice[]
}

model Invoice {
  id           String        @id @default(uuid())
  dueDate      DateTime
  paid         Boolean
  creditCardId String
  creditCard   CreditCard    @relation(fields: [creditCardId], references: [id], onDelete: Cascade)
  installments Installment[]
}

model Installment {
  id                   String             @id @default(uuid())
  installmentValue     Float
  invoiceId            String
  invoice              Invoice            @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  creditCardPurchaseId String
  creditCardPurchase   CreditCardPurchase @relation(fields: [creditCardPurchaseId], references: [id], onDelete: Cascade)
}

model CreditCardPurchase {
  id                 String        @id @default(uuid())
  name               String
  description        String?
  value              Float
  purchaseDate       DateTime
  installmentsNumber Int
  categoryId         String
  category           Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  installments       Installment[]
}
